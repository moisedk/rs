"""Remove visible and update visible_on

Revision ID: d79f3b480b5f
Revises: 72b94339bbbb
Create Date: 2024-10-25 08:09:52.611254

"""
from typing import Sequence, Union
from datetime import datetime, timedelta
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd79f3b480b5f'
down_revision: Union[str, None] = '72b94339bbbb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('assignments', sa.Column('visible_on', sa.DateTime(), nullable=True))
    # Update existing records based for visible_on on the visible value
    connection = op.get_bind()
    assignments = connection.execute(sa.text("SELECT id, visible FROM assignments"))
    
    for assignment in assignments:
        if assignment.visible:
            new_visible_on = datetime.utcnow()  # Make it visible now
        else:
            # Set visible_on to 10 years from now if visible == False
            new_visible_on = datetime.utcnow() + timedelta(days=365 * 10)
        
        connection.execute(
            sa.text("UPDATE assignments SET visible_on = :visible_on WHERE id = :id"),
            {"visible_on": new_visible_on, "id": assignment.id}
        )
    # Remove the old column
    op.drop_column('assignments', 'visible')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('assignments', sa.Column('visible', sa.CHAR(length=1), autoincrement=False, nullable=False))
    op.drop_column('assignments', 'visible_on')
    # ### end Alembic commands ###
